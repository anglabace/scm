package com.genscript.gsscm.common;

import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeUtility;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.ServletActionContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;

import com.genscript.gsscm.order.dto.OrderItemDTO;
import com.genscript.gsscm.order.dto.OrderMainDTO;
import com.genscript.gsscm.order.entity.Document;
import com.genscript.gsscm.product.entity.ProductClass;
import com.genscript.gsscm.quote.dto.QuoteItemDTO;
import com.genscript.gsscm.quote.dto.QuoteMainDTO;
import com.genscript.gsscm.serv.entity.ServiceClass;
import com.genscript.gsscm.shipment.dto.ShipPackageLineDTO;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

/**
 * MIME mail service class.
 * 
 * Generated by the Freemarker engine html format of the message, and with an attachment.
 * 
 * @author Golf
 */
@Service
@Transactional
public class MimeMailService {

	private static final String DEFAULT_ENCODING = "utf-8";
	private static Logger logger = LoggerFactory.getLogger(MimeMailService.class);
	
	private final static String SEPARATE = ",";
	private JavaMailSender mailSender;
	private Template template;
	@Autowired
	private FileService fileService;
	protected Configuration freemarkerConfiguration=null; //FreeMarker的技术类  
//	@Autowired
//	private RemoteFileUtil remoteFileUtil;
	
	public void sendNotificationMail(String userName, String mailTo, String subject) {

		try {
			MimeMessage msg = mailSender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(msg, true, DEFAULT_ENCODING);

			helper.setTo(mailTo);
			helper.setFrom("scm_admin@genscriptcorp.com");
			helper.setSubject(subject);

			String content = buildContent(userName);
			helper.setText(content, true);

			File attachment = buildAttachment("/email/mailAttachment.doc");
			helper.addAttachment("mailAttachment.doc", attachment);

			mailSender.send(msg);
			logger.info("HTML format of message has been sent to " + mailTo);
		} catch (Exception e) {
			logger.error("Failed to send mail!", e);
			//throw ReflectionUtils.convertReflectionExceptionToUnchecked(e);
		}
	}
	
	public void sendMail(String mailTo, String subject, String content, String relaPath, List<String> attachmentNameList) {
		String[] mailToArray = StringUtils.split(mailTo, SEPARATE);
		try {
			MimeMessage msg = mailSender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(msg, true, DEFAULT_ENCODING);

			helper.setFrom("scm_admin@genscriptcorp.com");
			helper.setSubject(subject);

			helper.setText(content, true);

			if(attachmentNameList != null && attachmentNameList.size() > 0){
				for(String attachmentName : attachmentNameList){
//					File file = remoteFileUtil.readFile(attachmentName);
					File file = new FileSystemResource(fileService.getUploadPath()+ relaPath + "\\" + attachmentName).getFile();
					File file2 = new File(attachmentName);
					if(!file.exists()&&file2.exists()) {
						file = new FileSystemResource(attachmentName).getFile();
					}
					helper.addAttachment(attachmentName, file);
				}
			}
			for(String to : mailToArray){
				helper.setTo(to);
				mailSender.send(msg);
				logger.info("HTML format of message has been sent to " + to);
			}
		} catch (Exception e) {
			logger.error("Failed to send mail!", e);
			//throw ReflectionUtils.convertReflectionExceptionToUnchecked(e);
		}
	}
	
	public void sendMail(String mailTo, String subject, String content, List<String> attachmentNameList) {
		String[] mailToArray = StringUtils.split(mailTo, SEPARATE);
		try {
			MimeMessage msg = mailSender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(msg, true, DEFAULT_ENCODING);

			helper.setFrom("scm_admin@genscriptcorp.com");
			helper.setSubject(subject);

			helper.setText(content, true);

			if(attachmentNameList != null && attachmentNameList.size() > 0){
				for(String attachmentName : attachmentNameList){
//					File file = remoteFileUtil.readFile(attachmentName);
					File file = new FileSystemResource(attachmentName).getFile();
					helper.addAttachment(MimeUtility.encodeWord(file.getName(),"UTF-8",null), file);
				}
			}
			for(String to : mailToArray){
				helper.setTo(to);
				mailSender.send(msg);
				logger.info("HTML format of message has been sent to " + to);
			}
		} catch (Exception e) {
			logger.error("Failed to send mail!", e);
			//throw ReflectionUtils.convertReflectionExceptionToUnchecked(e);
		}
	}
	
	public static void main(String[] args){
		FileSystemResource file = new FileSystemResource("file:order/estain.jpg");
	}
	
	public void sendMail(String mailTo, String subject, String content, List<String> attachmentNameList , List<String> fileNames,String path) {
		String[] mailToArray = StringUtils.split(mailTo, SEPARATE);
		try {
			MimeMessage msg = mailSender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(msg, true, DEFAULT_ENCODING);

			helper.setFrom("scm_admin@genscriptcorp.com");
			helper.setSubject(subject);

			helper.setText(content, true);
			if(fileNames != null && fileNames.size() > 0){
				String basePath = ServletActionContext.getServletContext().getRealPath("/email");//发送邮件图片绝对路地址。
				for(String fileName : fileNames){
					//System.out.println(basePath+"/"+path+fileName);
					FileSystemResource file = new FileSystemResource(basePath+"/"+path+fileName);
					helper.addInline(fileName, file);
				}
			}
			if(attachmentNameList != null && attachmentNameList.size() > 0){
				for(String attachmentName : attachmentNameList){
//					File file = remoteFileUtil.readFile(attachmentName);
					File file = new FileSystemResource(attachmentName).getFile();
					helper.addAttachment(MimeUtility.encodeWord(file.getName(),"UTF-8",null), file);
				}
			}
			for(String to : mailToArray){
				helper.setTo(to);
				mailSender.send(msg);
				logger.info("HTML format of message has been sent to " + to);
			}
		} catch (Exception e) {
			logger.error("Failed to send mail!", e);
			//throw ReflectionUtils.convertReflectionExceptionToUnchecked(e);
		}
	}
	
	public void sendQuoteFollowUpMail(String mailTo, String subject, String content, List<Document> documentList) {
		String[] mailToArray = StringUtils.split(mailTo, SEPARATE);
		try {
			MimeMessage msg = mailSender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(msg, true, DEFAULT_ENCODING);

			helper.setFrom("scm_admin@genscriptcorp.com");
			helper.setSubject(subject);

			helper.setText(content, true);

			if(documentList != null && documentList.size() > 0){
				for(Document document : documentList){
					File file = new FileSystemResource(fileService.getUploadPath() + document.getFilePath()).getFile();
					if(file !=null ){
						helper.addAttachment(MimeUtility.encodeWord(document.getDocName(),"UTF-8",null), file);
					}
				}
			}
			for(String to : mailToArray){
				helper.setTo(to);
				mailSender.send(msg);
				logger.info("HTML format of message has been sent to " + to);
			}
		} catch (Exception e) {
			logger.error("Failed to send mail!", e);
			//throw ReflectionUtils.convertReflectionExceptionToUnchecked(e);
		}
	}
	
	public void sendMail(String mailTo, String subject, String content,String from) {
		String[] mailToArray = StringUtils.split(mailTo, SEPARATE);
		try {
			MimeMessage msg = mailSender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(msg, true, DEFAULT_ENCODING);

//			helper.setTo(mailTo);
			helper.setFrom(from);
			helper.setSubject(subject);

			helper.setText(content, true);
			for(String to : mailToArray){
				helper.setTo(to);
				mailSender.send(msg);
				logger.info("HTML format of message has been sent to " + to);
			}
		} catch (Exception e) {
			logger.error("Failed to send mail!", e);
			//throw ReflectionUtils.convertReflectionExceptionToUnchecked(e);
		}
	}
	
	/**
	 * 发送Email
	 * @author Zhang Yong 
	 * add date 2011-10-26
	 * @param mailTo 收件人，多个以","隔开
	 * @param subject 主题
	 * @param content 正文内容
	 * @param from 发件人
	 * @param documentList 附件
	 */
	public void sendMails (String mailTo, String subject, String content,String from, List<Document> documentList) {
		String[] mailToArray = StringUtils.split(mailTo, SEPARATE);
		try {
			MimeMessage msg = mailSender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(msg, true, DEFAULT_ENCODING);
			helper.setFrom(from);
			helper.setSubject(subject);
			helper.setText(content, true);
			
			if(documentList != null && documentList.size() > 0){
				for(Document document : documentList){
					File file = new FileSystemResource(fileService.getUploadPath() + document.getFilePath()).getFile();
					if(file !=null ){
						helper.addAttachment(MimeUtility.encodeWord(document.getDocName(),"UTF-8",null), file);
					}
				}
			}
			
			for(String to : mailToArray){
				helper.setTo(to);
				mailSender.send(msg);
				logger.info("HTML format of message has been sent to " + to);
			}
		} catch (Exception e) {
			logger.error("Failed to send mail!", e);
			//throw ReflectionUtils.convertReflectionExceptionToUnchecked(e);
		}
	}

	/**
	 *  Generated Html format content using Freemarker.
	 */

	private String buildContent(String userName) throws MessagingException {
		try {
			@SuppressWarnings("rawtypes")
			Map context = Collections.singletonMap("userName", userName);
			return FreeMarkerTemplateUtils.processTemplateIntoString(template, context);
		} catch (IOException e) {
			logger.error("Construction mail failure, FreeMarker template does not exist", e);
			throw new MessagingException("FreeMarker template does not exist", e);
		} catch (TemplateException e) {
			logger.error("Construction mail failure, FreeMarker processing failed", e);
			throw new MessagingException("FreeMarker processing failed", e);
		}
	}
	
	public String buildOrderSummaryContent(Map<String, OrderItemDTO> orderItemMap, OrderMainDTO orderMain,
			String itemId, OrderItemDTO orderItem, StringBuffer sbf,
			ServiceClass sc, ProductClass pc, List extendedList) throws MessagingException {
		try {
			//Map context = Collections.singletonMap("userName", userName);
			Map<String, Object> context = new HashMap<String, Object>();
			context.put("orderItem", orderItem);
			context.put("orderMain", orderMain);
			context.put("sc", sc);
			context.put("orderItemMap", orderItemMap);
            context.put("extendedList", extendedList);
			return FreeMarkerTemplateUtils.processTemplateIntoString(template, context);
		} catch (IOException e) {
			logger.error("Construction mail failure, FreeMarker template does not exist", e);
			throw new MessagingException("FreeMarker template does not exist", e);
		} catch (TemplateException e) {
			logger.error("Construction mail failure, FreeMarker processing failed", e);
			throw new MessagingException("FreeMarker processing failed", e);
		}
	}
	
	public String buildOrderSummaryContent(Map<String, QuoteItemDTO> quoteItemMap, QuoteMainDTO quoteMain,
			String itemId, QuoteItemDTO quoteItem, StringBuffer sbf,
			ServiceClass sc, ProductClass pc, List extendedList) throws MessagingException {
		try {
			//Map context = Collections.singletonMap("userName", userName);
			Map<String, Object> context = new HashMap<String, Object>();
			context.put("orderItem", quoteItem);
			context.put("orderMain", quoteMain);
			context.put("sc", sc);
			context.put("orderItemMap", quoteItemMap);
			context.put("extendedList", extendedList);
			return FreeMarkerTemplateUtils.processTemplateIntoString(template, context);
		} catch (IOException e) {
			logger.error("Construction mail failure, FreeMarker template does not exist", e);
			throw new MessagingException("FreeMarker template does not exist", e);
		} catch (TemplateException e) {
			logger.error("Construction mail failure, FreeMarker processing failed", e);
			throw new MessagingException("FreeMarker processing failed", e);
		}
	}

	/**
	 * Add Attached.
	 */
	private File buildAttachment(String attachmentName) throws MessagingException {
		try {
			Resource resource = new ClassPathResource(attachmentName);
			return resource.getFile();
		} catch (IOException e) {
			logger.error("Construction mail failure, attachment file does not exist", e);
			throw new MessagingException("Attachment file does not exist", e);
		}
	}
	
	public boolean removeFile(File file) {  
        return file.delete();  
    } 
	
	 /**  
	  * 发送带模板的单个html邮件格式
	  */  
	public String buildShippingPickUpContent(String fistName,Integer orderNo,String trackingNo,
			
			String po,List<ShipPackageLineDTO> shipPackageLineDTOList,String basePath) throws Exception {      
		String htmlText = "";       
		//通过指定模板名获取FreeMarker模板实例      
		Template tpl = freemarkerConfiguration.getTemplate("shipmentNotificationEmail.ftl",DEFAULT_ENCODING);
		Map map = new HashMap();    //FreeMarker通过Map传递动态数据
		map.put("fistName",fistName );
		map.put("orderNo", orderNo.toString());
		map.put("now", new Date());
		map.put("trackingNo",trackingNo );
		map.put("po",po );
		map.put("shipPackageLineDTOList",shipPackageLineDTOList );
		map.put("basePath", basePath);
		//map.put("content",content); //注意动态数据的key和模板标签中指定的属性相匹配 
		//解析模板并替换动态数据，最终content将替换模板文件中的${content}标签.
		htmlText = FreeMarkerTemplateUtils.processTemplateIntoString(tpl,map);      
		return htmlText;      
	}   

	
	
	/**
	 * Spring MailSender.
	 */
	public void setMailSender(JavaMailSender mailSender) {
		this.mailSender = mailSender;
	}
	
	public void setFreemarkerConfiguration(Configuration freemarkerConfiguration) throws IOException {
        freemarkerConfiguration.setClassicCompatible(true);
		template = freemarkerConfiguration.getTemplate("orderSummary.ftl", DEFAULT_ENCODING);
		this.freemarkerConfiguration = freemarkerConfiguration;
	}

}
